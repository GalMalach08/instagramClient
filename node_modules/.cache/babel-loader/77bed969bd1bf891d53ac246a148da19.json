{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05DE\\u05DC\\u05D0\\u05DA \\u05D2\\u05DC\\\\Desktop\\\\Projects\\\\Instagram-master\\\\client\\\\src\\\\components\\\\story\\\\StoryModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // Formik\n\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup'; // Cloudinary\n\nimport { Image } from 'cloudinary-react'; // material ui icons\n\nimport ShareIcon from '@material-ui/icons/Share';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport ImageIcon from '@material-ui/icons/Image';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport CloseIcon from '@material-ui/icons/Close';\nimport FavoriteIcon from '@material-ui/icons/Favorite'; // Bootstrap\n\nimport Modal from 'react-bootstrap/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Input, IconButton, Card, CardActions, CardHeader, CardMedia, Collapse, Avatar, TextField, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '30px'\n  },\n  previewcard: {\n    width: '300px',\n    height: '340px',\n    margin: 'auto'\n  },\n  media: {\n    height: '550px',\n    width: '550px',\n    paddingTop: '56.25%' // 16:9\n\n  },\n  previewmedia: {\n    width: '300px',\n    height: '200px'\n  },\n  modalHeader: {\n    display: 'flex',\n    justifyContent: 'center',\n    fontWeight: 'bold'\n  },\n  imageIcon: {\n    marginBottom: '8px',\n    marginRight: '5px'\n  }\n}));\n\nconst StoryModal = ({\n  storyModal,\n  setStoryModal\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [fileName, setFileName] = useState('');\n  const [previewSource, setPreviewSource] = useState('');\n  const [isProfile, setIsProfile] = useState(false);\n  const [openAlert, setOpenAlert] = useState(false);\n  const [isBedAlert, setIsBedAlert] = useState(false);\n  const [message, setMessage] = useState('');\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  const closeModal = () => setStoryModal(false); // formik validation\n\n\n  const validationSchema = Yup.object().shape({\n    photo: Yup.string().required('photo is required')\n  }); // Edit the profile image\n\n  const editImage = values => {\n    values.fileName = fileName;\n\n    if (typeof values.photo === 'object') {\n      const reader = new FileReader();\n      reader.readAsDataURL(values.photo);\n\n      reader.onloadend = () => {\n        setPreviewSource(reader.result);\n        values.photo = reader.result;\n        addNewStory(values);\n      };\n    } else {\n      addNewStory(values);\n    }\n  }; // Add new Post\n\n\n  const addNewStory = async values => {\n    const newStory = {\n      photo: values.photo,\n      UserId: JSON.parse(localStorage.getItem('user')).id,\n      fileName: values.fileName\n    };\n\n    try {\n      const response = await fetch('/story', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newStory)\n      });\n      const data = await response.json();\n\n      if (data.story) {\n        setIsBedAlert(false);\n        setMessage('Story Added');\n        setOpenAlert(true);\n        setTimeout(() => {\n          closeModal();\n          setOpenAlert(false);\n        }, 1000);\n      } else {\n        setIsBedAlert(true);\n        setMessage(data.error);\n        setOpenAlert(true);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }; // Makes the preview image\n\n\n  const handleChangeImage = (e, setFieldValue) => {\n    const reader = new FileReader();\n    setFieldValue(\"photo\", e.target.files[0]);\n\n    if (e.target.files.length === 0) {\n      setIsProfile(false);\n      setFileName('');\n      setPreviewSource('');\n    } else {\n      reader.readAsDataURL(e.target.files[0]);\n\n      reader.onloadend = () => {\n        setPreviewSource(reader.result);\n      };\n\n      setIsProfile(true);\n      setFileName(e.target.files[0].name);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"lg\",\n      centered: true,\n      show: storyModal,\n      onHide: closeModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        className: classes.modalHeader,\n        children: [\" \", /*#__PURE__*/_jsxDEV(Modal.Title, {\n          style: {\n            fontWeight: '700'\n          },\n          children: \" Add new story \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 65\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            photo: '',\n            content: ''\n          },\n          validationSchema: validationSchema,\n          onSubmit: editImage,\n          children: ({\n            errors,\n            touched,\n            setFieldValue\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            style: {\n              textAlign: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              id: \"file\",\n              className: \"inputfile\",\n              type: \"file\",\n              name: \"photo\",\n              onChange: e => handleChangeImage(e, setFieldValue),\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: classes.profileBtn,\n              color: \"primary\",\n              variant: \"outlined\",\n              children: [/*#__PURE__*/_jsxDEV(ImageIcon, {\n                className: classes.imageIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 100\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"file\",\n                children: [fileName ? `${fileName} UPLOADED` : 'UPLPOAD IMAGE', \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 142\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 25\n            }, this), errors.photo && touched.photo ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"error\",\n              children: errors.photo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 57\n            }, this) : null, /*#__PURE__*/_jsxDEV(Collapse, {\n              in: openAlert,\n              children: /*#__PURE__*/_jsxDEV(Alert, {\n                style: {\n                  margin: '10px'\n                },\n                severity: isBedAlert ? \"error\" : \"success\",\n                action: /*#__PURE__*/_jsxDEV(IconButton, {\n                  color: \"inherit\",\n                  size: \"small\",\n                  onClick: () => setOpenAlert(false),\n                  children: [\" \", /*#__PURE__*/_jsxDEV(CloseIcon, {\n                    fontSize: \"inherit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 117\n                  }, this), \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 38\n                }, this),\n                children: message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                margin: '10px'\n              },\n              variant: \"outlined\",\n              color: \"primary\",\n              type: \"Submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 16\n    }, this)\n  }, void 0, false);\n};\n\n_s(StoryModal, \"jTmUyhiZkF6UNamquvZ6vLRrJDk=\", false, function () {\n  return [useStyles];\n});\n\n_c = StoryModal;\nexport default StoryModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoryModal\");","map":{"version":3,"sources":["C:/Users/מלאך גל/Desktop/Projects/Instagram-master/client/src/components/story/StoryModal.js"],"names":["React","useState","useEffect","Formik","Form","Yup","Image","ShareIcon","MoreVertIcon","ImageIcon","ChatBubbleOutlineIcon","CloseIcon","FavoriteIcon","Modal","makeStyles","Input","IconButton","Card","CardActions","CardHeader","CardMedia","Collapse","Avatar","TextField","Button","Alert","useStyles","theme","root","display","justifyContent","marginTop","previewcard","width","height","margin","media","paddingTop","previewmedia","modalHeader","fontWeight","imageIcon","marginBottom","marginRight","StoryModal","storyModal","setStoryModal","classes","fileName","setFileName","previewSource","setPreviewSource","isProfile","setIsProfile","openAlert","setOpenAlert","isBedAlert","setIsBedAlert","message","setMessage","user","JSON","parse","localStorage","getItem","closeModal","validationSchema","object","shape","photo","string","required","editImage","values","reader","FileReader","readAsDataURL","onloadend","result","addNewStory","newStory","UserId","id","response","fetch","method","headers","body","stringify","data","json","story","setTimeout","error","console","handleChangeImage","e","setFieldValue","target","files","length","name","content","errors","touched","textAlign","profileBtn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n// Formik\nimport { Formik, Form} from 'formik';\nimport * as Yup from 'yup';\n// Cloudinary\nimport {Image} from 'cloudinary-react';\n\n// material ui icons\nimport ShareIcon from '@material-ui/icons/Share';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport ImageIcon from '@material-ui/icons/Image';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport CloseIcon from '@material-ui/icons/Close';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n// Bootstrap\nimport Modal from 'react-bootstrap/Modal'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Input, IconButton, Card, CardActions, CardHeader, CardMedia, Collapse, Avatar,TextField, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display:'flex',\n      justifyContent:'center',\n      marginTop:'30px'\n    },\n    previewcard:{\n      width:'300px',\n      height:'340px',\n      margin:'auto'\n    },\n    media: {\n      height: '550px',\n      width:'550px',\n      paddingTop: '56.25%', // 16:9\n    },\n    previewmedia: {\n      width:'300px',\n      height:'200px'\n    },\n    modalHeader: {\n     display: 'flex',\n     justifyContent: 'center',\n     fontWeight:'bold',\n    },\n    imageIcon: {\n        marginBottom:'8px',\n        marginRight:'5px'\n      },\n   \n  }))\n  \n\nconst StoryModal = ({storyModal, setStoryModal}) => {\n    const classes = useStyles()\n    const [fileName, setFileName] = useState('')\n    const [previewSource, setPreviewSource] = useState('')\n    const [isProfile, setIsProfile] = useState(false)\n    const [openAlert, setOpenAlert] = useState(false)\n    const [isBedAlert, setIsBedAlert] = useState(false)\n    const [message, setMessage] = useState('')\n    const user = JSON.parse(localStorage.getItem('user'))\n\n    const closeModal = () => setStoryModal(false)\n     // formik validation\n    const validationSchema = Yup.object().shape({\n        photo:Yup.string()\n        .required('photo is required')\n    })\n\n    // Edit the profile image\n    const editImage =  (values) => {\n        values.fileName = fileName\n        if(typeof values.photo === 'object' ) {\n        const reader = new FileReader()\n        reader.readAsDataURL(values.photo)\n        reader.onloadend = () => {\n        setPreviewSource(reader.result)\n        values.photo = reader.result\n        addNewStory(values)\n        }\n        } else {\n            addNewStory(values)\n        }\n    }\n\n      // Add new Post\n  const addNewStory = async (values) => {\n    const newStory = {\n      photo: values.photo,\n      UserId : JSON.parse(localStorage.getItem('user')).id,\n      fileName: values.fileName,\n    }\n      try {\n        const response = await fetch('/story', { \n        method: 'POST',\n        headers: {\n            'Content-Type':'application/json'\n        },\n        body: JSON.stringify(newStory)\n      })\n\n      const data = await response.json()\n      if(data.story){\n        setIsBedAlert(false)\n        setMessage('Story Added')\n        setOpenAlert(true)\n        setTimeout(() =>  {\n            closeModal()\n            setOpenAlert(false)\n        },1000)\n      } else {\n        setIsBedAlert(true)\n        setMessage(data.error)\n        setOpenAlert(true)\n      }\n\n    } catch (error) {\n        console.error(error)\n      }\n}\n\n       // Makes the preview image\n       const handleChangeImage = (e,setFieldValue) => {\n        const reader = new FileReader()\n        setFieldValue(\"photo\", e.target.files[0])\n        if(e.target.files.length === 0) {\n          setIsProfile(false)\n          setFileName('')\n          setPreviewSource('')\n        } \n        else {\n          reader.readAsDataURL(e.target.files[0])\n          reader.onloadend = () => {\n            setPreviewSource(reader.result)\n          }\n          setIsProfile(true)\n          setFileName(e.target.files[0].name)\n        }\n      }\n\n    return (\n        <>\n               <Modal size=\"lg\" centered show={storyModal} onHide={closeModal}>\n                 <Modal.Header className={classes.modalHeader}> <Modal.Title style={{fontWeight:'700'}}> Add new story </Modal.Title> </Modal.Header>\n                 <Modal.Body>\n                 <Formik \n                   initialValues={{photo:'',content:''}}\n                   validationSchema={validationSchema}\n                   onSubmit={ editImage }>\n                    {({ errors, touched, setFieldValue }) => (\n                      <Form style={{textAlign:'center'}}>\n                      <Input id=\"file\" className=\"inputfile\" type=\"file\" name=\"photo\" onChange={(e) => handleChangeImage(e,setFieldValue )} hidden/> \n                        <Button className={classes.profileBtn} color='primary'  variant=\"outlined\"><ImageIcon className={classes.imageIcon}/><label htmlFor=\"file\">{fileName ? `${fileName} UPLOADED` : 'UPLPOAD IMAGE'} </label></Button>\n                      {errors.photo && touched.photo ?  <div className=\"error\">{errors.photo}</div>  : null}\n                        <Collapse in={openAlert}>\n                            <Alert \n                            style={{margin:'10px'}}\n                            severity={isBedAlert ? \"error\": \"success\"}\n                            action={ <IconButton color=\"inherit\" size=\"small\" onClick={() => setOpenAlert(false) }> <CloseIcon fontSize=\"inherit\" /> </IconButton>}>\n                            {message}\n                            </Alert>\n                          </Collapse>\n                        <Button style={{margin:'10px'}} variant=\"outlined\" color=\"primary\" type=\"Submit\">Submit</Button>\n                      </Form>\n                    )}\n                  </Formik>\n                 </Modal.Body>\n            </Modal>\n        </>\n    )\n}\n\nexport default StoryModal\n"]},"metadata":{},"sourceType":"module"}