{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05DE\\u05DC\\u05D0\\u05DA \\u05D2\\u05DC\\\\Desktop\\\\Projects\\\\Instagram-master\\\\client\\\\src\\\\components\\\\SignIn\\\\emailStepper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField, Button, Stepper, Step, StepLabel } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 345,\n    margin: 'auto',\n    padding: '10px'\n  },\n  large: {\n    width: theme.spacing(12),\n    height: theme.spacing(12),\n    margin: 'auto'\n  }\n}));\n\nconst EmailStepper = ({\n  setEmailModal\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const [user, setUser] = useState();\n  const steps = ['Enter your Email', 'Verify account', 'Are You Sure ?', 'Done'];\n\n  const errorHelper = (formik, values) => ({\n    error: formik.errors[values] && formik.touched[values] ? true : false,\n    helperText: formik.errors[values] && formik.touched[values] ? formik.errors[values] : null\n  });\n\n  const handleNext = () => {\n    setActiveStep(prev => prev + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prev => prev - 1);\n  };\n\n  const nextBtn = () => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      className: \"m-3\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: () => {\n        handleNext();\n\n        if (activeStep === 0) {\n          bringUser();\n        }\n      },\n      children: \"next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this);\n  };\n\n  const prevBtn = () => /*#__PURE__*/_jsxDEV(Button, {\n    className: \"m-3\",\n    variant: \"contained\",\n    onClick: handleBack,\n    children: \"back\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n\n  const bringUser = async () => {\n    const response = await fetch(`https://instappmalach.herokuapp.com/useremail/${JSON.stringify(formik.values.email)}`);\n    const data = await response.json();\n    if (data.success) setUser(data.user);\n  };\n\n  const sendEmail = async values => {\n    const response = await fetch(`https://instappmalach.herokuapp.com/email/${JSON.stringify(values.email)}`);\n    const data = await response.json();\n    if (data.success) console.log('email sent');else console.log('email does not sent');\n  };\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      email: ''\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().required('This is required field').email('This is not a valid email')\n    }),\n    onSubmit: (values, {\n      resetForm\n    }) => {\n      sendEmail(values);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      activeStep: activeStep,\n      children: steps.map(step => /*#__PURE__*/_jsxDEV(Step, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: step\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 35\n        }, this)]\n      }, step, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"mt-3 stepper_form text-center\",\n      onSubmit: formik.handleSumbit,\n      children: [activeStep === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          style: {\n            width: '100%'\n          },\n          name: \"email\",\n          label: \"Enter your email\",\n          variant: \"outlined\",\n          ...formik.getFieldProps('email'),\n          ...errorHelper(formik, 'email')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), formik.values.email && !formik.errors.email ? nextBtn() : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this) : null, activeStep === 1 && user ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          className: classes.root,\n          children: [/*#__PURE__*/_jsxDEV(CardActionArea, {\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              alt: \"Remy Sharp\",\n              src: user.image,\n              className: classes.large\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 24\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                component: \"h2\",\n                children: [user.firstname, \" \", user.lastname]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"textSecondary\",\n                component: \"p\",\n                children: \" Is that you ? \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            style: {\n              marginLeft: '110px'\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"m-3\",\n              variant: \"contained\",\n              size: \"large\",\n              color: \"primary\",\n              onClick: () => setActiveStep(prev => prev + 1),\n              children: \" Yes \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 20\n        }, this), prevBtn()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this) : null, activeStep === 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"m-3\",\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => {\n            formik.submitForm();\n            handleNext();\n          },\n          children: \" Send me new password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 24\n        }, this), prevBtn()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this) : null, activeStep === 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Email sent to \", formik.values.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"m-3\",\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => setEmailModal(false),\n          children: \" Close \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EmailStepper, \"QrNx3yXHyLUNGPOS2OOq/pwUhuw=\", false, function () {\n  return [useStyles, useFormik];\n});\n\n_c = EmailStepper;\nexport default EmailStepper;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailStepper\");","map":{"version":3,"sources":["C:/Users/מלאך גל/Desktop/Projects/Instagram-master/client/src/components/SignIn/emailStepper.js"],"names":["React","useState","useFormik","Yup","TextField","Button","Stepper","Step","StepLabel","Avatar","makeStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Typography","useStyles","theme","root","maxWidth","margin","padding","large","width","spacing","height","EmailStepper","setEmailModal","classes","activeStep","setActiveStep","user","setUser","steps","errorHelper","formik","values","error","errors","touched","helperText","handleNext","prev","handleBack","nextBtn","bringUser","prevBtn","response","fetch","JSON","stringify","email","data","json","success","sendEmail","console","log","enableReinitialize","initialValues","validationSchema","object","string","required","onSubmit","resetForm","map","step","handleSumbit","getFieldProps","textAlign","image","firstname","lastname","marginLeft","submitForm"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField, Button, Stepper, Step, StepLabel} from '@material-ui/core'\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      maxWidth: 345,\n      margin:'auto',\n      padding:'10px'\n    },\n    large: {\n        width: theme.spacing(12),\n        height: theme.spacing(12),\n        margin:'auto'\n      },\n  }))\n\nconst EmailStepper = ({setEmailModal}) => {\nconst classes = useStyles();\nconst [activeStep, setActiveStep] = useState(0)\nconst [user, setUser] = useState()\nconst steps = ['Enter your Email', 'Verify account', 'Are You Sure ?','Done'];\n\n\nconst errorHelper = (formik,values) => ({\n    error: formik.errors[values] && formik.touched[values] ? true : false,\n    helperText: formik.errors[values] && formik.touched[values] ? formik.errors[values]:null\n})\n\nconst handleNext = () => {\n    setActiveStep((prev) => prev + 1)\n}\n\nconst handleBack = () => {\n    setActiveStep((prev) => prev - 1)\n}\nconst nextBtn = () => {\n   \n        \n    \n    return(\n    <Button className=\"m-3\" variant=\"contained\" color=\"primary\" onClick={() => {\n        handleNext()\n        if (activeStep === 0) {\n            bringUser()}\n    }}>\n        next\n    </Button>\n    )\n}\nconst prevBtn = () => (\n    <Button className=\"m-3\" variant=\"contained\"  onClick={handleBack}>\n        back\n    </Button>\n)\n\nconst bringUser = async () => {\n    const response = await fetch(`https://instappmalach.herokuapp.com/useremail/${JSON.stringify(formik.values.email)}`)\n    const data = await response.json()\n    if(data.success) setUser(data.user)\n}\n\nconst sendEmail = async (values) => {\n    const response = await fetch(`https://instappmalach.herokuapp.com/email/${JSON.stringify(values.email)}`)\n    const data = await response.json()\n    if(data.success) console.log('email sent');\n    else console.log('email does not sent')\n}\n\nconst formik = useFormik({\n    enableReinitialize:true,\n    initialValues:{ email:''},\n    validationSchema:Yup.object({\n        email:Yup.string()\n        .required('This is required field')\n        .email('This is not a valid email'),\n    }),\n    onSubmit: (values,{resetForm}) => {\n       \n        sendEmail(values)\n    }\n})\n\n\n\n\n    return (\n        <>\n            <Stepper activeStep={activeStep}>\n            {steps.map(step => (\n                <Step key={step}> <StepLabel>{step}</StepLabel></Step>\n            ))}\n\n            </Stepper>\n\n            <form className=\"mt-3 stepper_form text-center\" onSubmit={formik.handleSumbit}>\n                { activeStep === 0 ?\n                    <div className=\"form-group\">\n                    <TextField style={{width:'100%'}} name=\"email\" label=\"Enter your email\" variant=\"outlined\" {...formik.getFieldProps('email')} {...errorHelper(formik,'email')}/>\n                    {formik.values.email && !formik.errors.email ? \n                     nextBtn() \n                    :null}\n                    </div>\n                :null}\n\n                { activeStep === 1 && user ?\n                    <div style={{textAlign:'center'}}>\n                   <Card className={classes.root}>\n                    <CardActionArea>\n                       <Avatar alt=\"Remy Sharp\" src={user.image} className={classes.large}/>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                {user.firstname} {user.lastname}\n                            </Typography>\n                            <Typography  color=\"textSecondary\" component=\"p\"> Is that you ? </Typography>\n                    </CardContent>\n                </CardActionArea>\n                <CardActions style={{marginLeft:'110px'}}>\n                    <Button className=\"m-3\" variant=\"contained\" size=\"large\" color=\"primary\" onClick={() => setActiveStep((prev) => prev + 1)}> Yes </Button>\n                </CardActions>\n                </Card>\n                     {prevBtn()}\n\n                    </div>\n                :null}\n\n                { activeStep === 2 ?\n                    <div className=\"form-group\">\n                       <Button className=\"m-3\" variant=\"contained\" color=\"primary\" onClick={() => {\n                           formik.submitForm()\n                           handleNext()\n                       }}> Send me new password</Button> \n                       {prevBtn()}\n                    </div>\n                :null}\n\n                { activeStep === 3 ?\n                    <div className=\"form-group\">\n                    <h5>Email sent to {formik.values.email}</h5>\n                       <Button className=\"m-3\" variant=\"contained\" color=\"primary\" onClick={() => setEmailModal(false)}> Close </Button> \n                    </div>\n                :null}\n            </form>\n        </>\n    )\n}\nexport default EmailStepper;"]},"metadata":{},"sourceType":"module"}