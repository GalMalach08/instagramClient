{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05DE\\u05DC\\u05D0\\u05DA \\u05D2\\u05DC\\\\Desktop\\\\Projects\\\\Instagram-master\\\\client\\\\src\\\\components\\\\chat\\\\ChatMessages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport MoodIcon from '@material-ui/icons/Mood';\nimport { Avatar, IconButton, CardHeader, Divider, TextField, InputAdornment, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport queryString from 'query-string'; // Cloudinary\n\nimport { Image } from 'cloudinary-react'; // Css\n\nimport './style.css'; //Socket io\n\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket; // material ui style\n\nconst useStyles = makeStyles(theme => ({\n  likes: {\n    color: \"#262626\",\n    fontSize: '14px',\n    fontWeight: '600'\n  },\n  AddCommenttextField: {\n    flexBasis: 280,\n    margin: '20px 2px',\n    width: '99%',\n    padding: '1% 0%'\n  }\n}));\n\nconst ChatMessages = ({\n  user,\n  location\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const messagesEndRef = useRef();\n  const connectedUser = JSON.parse(localStorage.getItem('user'));\n  const classes = useStyles(); // Socket connection\n\n  const ENDPOINT = 'localhost:3001';\n  const connectionOptions = {\n    \"force new connection\": true,\n    \"reconnectionAttempts\": \"Infinity\",\n    \"timeout\": 10000,\n    \"transports\": [\"websocket\"]\n  };\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  const sendMessage = async e => {\n    e.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', {\n        name,\n        message\n      }, () => setMessage(''));\n      await fetch('https://instappmalach.herokuapp.com/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          UserId: connectedUser.id,\n          reciver_id: user.id,\n          sender_id: connectedUser.id,\n          content: message\n        })\n      });\n      await fetch('https://instappmalach.herokuapp.com/message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          UserId: user.id,\n          reciver_id: user.id,\n          sender_id: connectedUser.id,\n          content: message\n        })\n      });\n    }\n  };\n\n  const sendLocation = () => {\n    if (!navigator.geolocation) {\n      return alert('Your broswer not supported geolocation');\n    }\n\n    navigator.geolocation.getCurrentPosition(position => {\n      socket.emit('sendLocation', {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        name\n      }, async () => {\n        await fetch('https://instappmalach.herokuapp.com/message', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            UserId: connectedUser.id,\n            reciver_id: user.id,\n            sender_id: connectedUser.id,\n            content: message\n          })\n        });\n        await fetch('https://instappmalach.herokuapp.com/message', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            UserId: user.id,\n            reciver_id: user.id,\n            sender_id: connectedUser.id,\n            content: message\n          })\n        });\n      });\n    });\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT, connectionOptions);\n    socket.emit('join', {\n      id: connectedUser.id\n    });\n  }, []); // Handle messages\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n      setTimeout(() => scrollToBottom(), 400);\n    });\n    socket.on('locationMessage', message => {\n      setMessages([...messages, { ...message,\n        location: true\n      }]);\n      setMessage('');\n      setTimeout(() => scrollToBottom(), 400);\n    });\n  }, [messages]);\n\n  const getConversation = async () => {\n    const response = await fetch('https://instappmalach.herokuapp.com/message/conversation', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        UserId: connectedUser.id,\n        partnerId: user.id\n      })\n    });\n    const {\n      messages\n    } = await response.json();\n    setMessages(messages);\n  };\n\n  useEffect(() => {\n    setTimeout(() => scrollToBottom(), 400);\n\n    if (user) {\n      const {\n        chatwith\n      } = queryString.parse(location.search);\n      setName(chatwith);\n      getConversation();\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"base-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'sticky',\n        top: '0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          style: {\n            height: '56px',\n            width: '56px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            cloudName: \"malachcloud\",\n            publicId: user.profile,\n            width: \"56\",\n            height: \"56\",\n            crop: \"scale\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 67\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 22\n        }, this),\n        title: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/profile`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.likes,\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 20\n        }, this),\n        subheader: \"Active 2 hours ago\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages_div\",\n      children: [messages && messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.sender_id === connectedUser.id ? 'my-text-div' : 'friend-text-div',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.sender_id === connectedUser.id ? 'my-text-container' : 'friend-text-div',\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: message.sender_id === connectedUser.id ? 'my-text' : 'friend-text',\n            children: message.location ? /*#__PURE__*/_jsxDEV(\"a\", {\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              href: message.content,\n              children: \"My location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 26\n            }, this) : message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      onKeyPress: e => e.key === 'Enter' ? sendMessage(e) : null,\n      onChange: e => setMessage(e.target.value),\n      value: message,\n      className: classes.AddCommenttextField,\n      variant: \"outlined\",\n      type: \"text\",\n      label: \"Message\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            children: [\" \", /*#__PURE__*/_jsxDEV(MoodIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this),\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: sendLocation,\n            children: [\" \", /*#__PURE__*/_jsxDEV(LocationOnIcon, {\n              style: {\n                padding: '0px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 50\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: e => sendMessage(e),\n            color: \"primary\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ChatMessages, \"WWuLIaXSPl6cxnUbwyejzTUVZwA=\", false, function () {\n  return [useStyles];\n});\n\n_c = ChatMessages;\nexport default ChatMessages;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessages\");","map":{"version":3,"sources":["C:/Users/מלאך גל/Desktop/Projects/Instagram-master/client/src/components/chat/ChatMessages.js"],"names":["React","useState","useEffect","useRef","Link","MoodIcon","Avatar","IconButton","CardHeader","Divider","TextField","InputAdornment","Button","makeStyles","LocationOnIcon","queryString","Image","io","socket","useStyles","theme","likes","color","fontSize","fontWeight","AddCommenttextField","flexBasis","margin","width","padding","ChatMessages","user","location","messages","setMessages","name","setName","message","setMessage","messagesEndRef","connectedUser","JSON","parse","localStorage","getItem","classes","ENDPOINT","connectionOptions","scrollToBottom","current","scrollIntoView","behavior","sendMessage","e","preventDefault","emit","fetch","method","headers","body","stringify","UserId","id","reciver_id","sender_id","content","sendLocation","navigator","geolocation","alert","getCurrentPosition","position","latitude","coords","longitude","on","setTimeout","getConversation","response","partnerId","json","chatwith","search","top","height","profile","username","map","i","key","target","value","startAdornment","endAdornment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Link } from 'react-router-dom'\nimport MoodIcon from '@material-ui/icons/Mood';\nimport { Avatar, IconButton, CardHeader, Divider, TextField, InputAdornment, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport queryString from 'query-string'\n// Cloudinary\nimport {Image} from 'cloudinary-react';\n// Css\nimport './style.css'\n//Socket io\nimport io from 'socket.io-client'\nlet socket\n\n// material ui style\nconst useStyles = makeStyles((theme) => ({\n    likes: {\n      color: \"#262626\",\n      fontSize:'14px',\n      fontWeight: '600',\n    },\n    AddCommenttextField: {\n        flexBasis: 280,\n        margin: '20px 2px',\n        width:'99%',\n        padding:'1% 0%',\n     \n      },\n  }))\n\nconst ChatMessages = ({ user, location }) => {\n    const [messages, setMessages] = useState('')\n    const [name, setName] = useState('')\n    const [message, setMessage] = useState('')\n    const messagesEndRef = useRef()\n    const connectedUser = JSON.parse(localStorage.getItem('user'))\n    const classes = useStyles()\n    \n    // Socket connection\n    const ENDPOINT = 'localhost:3001'\n    const connectionOptions =  {\n        \"force new connection\" : true,\n        \"reconnectionAttempts\": \"Infinity\", \n        \"timeout\" : 10000,                  \n        \"transports\" : [\"websocket\"]\n    }\n\n    const scrollToBottom = () => {\n      messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    const sendMessage = async (e) => {\n        e.preventDefault()\n       \n        if(message) {\n            socket.emit('sendMessage', { name,message }, () => setMessage(''))    \n            await fetch('https://instappmalach.herokuapp.com/message', { method: 'POST', headers: { 'Content-Type':'application/json' },\n            body: JSON.stringify({ UserId: connectedUser.id, reciver_id:user.id, sender_id:connectedUser.id, content: message })\n          })\n            await fetch('https://instappmalach.herokuapp.com/message', { method: 'POST', headers: { 'Content-Type':'application/json' },\n            body: JSON.stringify({ UserId: user.id, reciver_id:user.id, sender_id:connectedUser.id, content: message })\n         })\n        }\n    }\n    \n    const sendLocation =  () => {\n      if(!navigator.geolocation) {\n          return alert('Your broswer not supported geolocation')\n      }\n      navigator.geolocation.getCurrentPosition(position => {\n        socket.emit('sendLocation', {latitude: position.coords.latitude, longitude: position.coords.longitude, name}, async () => {\n          await fetch('https://instappmalach.herokuapp.com/message', { method: 'POST', headers: { 'Content-Type':'application/json' },\n          body: JSON.stringify({ UserId: connectedUser.id, reciver_id:user.id, sender_id:connectedUser.id, content: message })\n        })\n          await fetch('https://instappmalach.herokuapp.com/message', { method: 'POST', headers: { 'Content-Type':'application/json' },\n          body: JSON.stringify({ UserId: user.id, reciver_id:user.id, sender_id:connectedUser.id, content: message })\n       })\n      })\n      })\n    }\n\n    useEffect(() => {\n        socket = io(ENDPOINT, connectionOptions)\n        socket.emit('join', { id:connectedUser.id } )\n    }, [])\n\n    // Handle messages\n    useEffect(() => {\n      socket.on('message', (message) => {\n      setMessages([...messages, message])\n      setTimeout(() => scrollToBottom(), 400)\n      })\n      socket.on('locationMessage', (message) => {\n        setMessages([...messages,{...message,location:true} ])\n        setMessage('')\n        setTimeout(() => scrollToBottom(), 400)\n    })\n    }, [messages])\n\n\n    const getConversation = async () => {\n        const response = await fetch('https://instappmalach.herokuapp.com/message/conversation', { \n            method: 'POST',\n            headers: {\n                'Content-Type':'application/json'\n            },\n            body: JSON.stringify({ UserId:connectedUser.id, partnerId: user.id})\n          })\n          const { messages } = await response.json()\n          setMessages(messages)\n    }\n\n    useEffect(() => {\n    \n      setTimeout(() => scrollToBottom(), 400)\n        if(user) {\n          const { chatwith } = queryString.parse(location.search)\n          setName(chatwith)\n          getConversation()\n        }\n    }, [user])\n\n\n\n    return (\n        \n           <div className=\"base-container\">\n           <div style={{position: 'sticky',  top: '0'}}>\n          <CardHeader \n           \n            avatar={ <Avatar style={{height:'56px',width:'56px'}}><Image cloudName=\"malachcloud\" publicId={user.profile} width=\"56\" height=\"56\" crop=\"scale\" /> </Avatar>}\n            title={<Link to={`/profile`}><span className={classes.likes}>{user.username}</span></Link>}\n            subheader=\"Active 2 hours ago\"\n          />\n          <Divider />\n         </div>\n        <div className=\"messages_div\">\n           {messages && messages.map((message, i) => (\n                <div key={i} className={message.sender_id === connectedUser.id ? 'my-text-div' : 'friend-text-div'}>\n                    <div className={message.sender_id === connectedUser.id ? 'my-text-container' : 'friend-text-div'}>\n                        <div className={message.sender_id === connectedUser.id ? 'my-text' : 'friend-text'}>\n                        { message.location ?\n                         <a target=\"_blank\"  rel=\"noreferrer\" href={message.content}>My location</a>\n                        :\n                        message.content\n                        }\n                       \n                        </div>\n                    </div>\n                </div>\n           ))}\n           <div ref={messagesEndRef} />\n        </div>\n          \n   \n           <TextField onKeyPress={e => e.key ==='Enter' ? sendMessage(e): null} onChange={(e) => setMessage(e.target.value)} value={message} className={classes.AddCommenttextField} variant=\"outlined\" type=\"text\" label=\"Message\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <IconButton> <MoodIcon/></IconButton>\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <InputAdornment position=\"end\">\n               <Button onClick={ sendLocation }> <LocationOnIcon style={{padding:'0px'}}/> </Button>\n                <Button  onClick={(e) => sendMessage(e) } color=\"primary\">Send</Button>\n              </InputAdornment>\n            ),\n          }}/>\n   \n        \n        </div>\n      \n    )\n}\n\nexport default ChatMessages\n"]},"metadata":{},"sourceType":"module"}